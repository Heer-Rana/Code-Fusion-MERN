import { createContext, useContext, useState } from "react";
import { useFile } from "../context/FileContext"; // Corrected import path for FileContext

const CopilotContext = createContext();

export const CopilotContextProvider = ({ children }) => {
  const [input, setInput] = useState("");
  const [output, setOutput] = useState("");
  const [isRunning, setIsRunning] = useState(false);

  // Destructure only necessary functions and states from useFile.
  // getFileById is no longer needed here as FileContext will handle opening/activating.
  const { createFile, fileStructure, updateFileContent } = useFile();

  const generateCode = async () => {
    if (!input.trim()) return;
    setIsRunning(true);
    setOutput("Generating code, please wait..."); // Provide immediate feedback to the user

    try {
      // The user's input is now treated as a natural language prompt for the LLM
      const prompt = input;

      // Prepare the payload for the Gemini API call
      let chatHistory = [];
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });

      const payload = {
        contents: chatHistory,
        generationConfig: {
          responseMimeType: "text/plain", // We expect the LLM to return plain text code
        }
      };
      // This is necessary if the Canvas environment isn't automatically injecting it for your setup.
      const apiKey = "AIzaSyCf6okrVgjq-zWVZEjxhBRHNPnRas041AI"; 
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      console.log("Copilot: Attempting to call Gemini API...");

      // Make the API call to Gemini for code generation
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      // Check if the HTTP response itself was successful
      if (!response.ok) {
        const errorBody = await response.text(); // Get raw error body
        console.error("Copilot: API Response not OK:", response.status, response.statusText, errorBody);

        if (response.status === 403) {
          throw new Error("Access Denied: The Gemini API might not be enabled for your project, or there's an issue with permissions. Please check your Google Cloud Project settings and ensure your API key is correct.");
        } else {
          throw new Error(`API request failed with status ${response.status}: ${errorBody}`);
        }
      }

      const result = await response.json();
      console.log("Copilot: Raw Gemini API response result:", result); // Log the full result for debugging

      let generatedCode = "No code generated.";
      // Check if the response contains valid content from the LLM
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        generatedCode = result.candidates[0].content.parts[0].text;
        console.log("Copilot: Code successfully generated by Gemini API.");
      } else {
        // If the LLM response structure is unexpected, throw an error
        console.error("Copilot: Unexpected Gemini API response structure:", result);
        throw new Error("Failed to get a valid response from the code generation model. Response structure was unexpected.");
      }

      // Basic language inference for file naming.
      let language = "txt"; // Default to a generic text file if language can't be inferred
      const lowerCasePrompt = prompt.toLowerCase();
      if (lowerCasePrompt.includes("python")) {
        language = "py";
      } else if (lowerCasePrompt.includes("javascript") || lowerCasePrompt.includes("js")) {
        language = "js";
      } else if (lowerCasePrompt.includes("html")) {
        language = "html";
      } else if (lowerCasePrompt.includes("css")) {
        language = "css";
      } else if (lowerCasePrompt.includes("java")) {
        language = "java";
      } else if (lowerCasePrompt.includes("c++") || lowerCasePrompt.includes("cpp")) {
        language = "cpp";
      } else if (lowerCasePrompt.includes("c#")) {
        language = "cs";
      }

      // Set the generated code as the output to be displayed in the UI
      setOutput(generatedCode);

      // --- CRITICAL FIX FOR FILE CREATION START ---
      console.log("Copilot: Attempting to create file...");
      const parentDirId = fileStructure?.id;

      if (!parentDirId) {
        console.error("Copilot: fileStructure.id is undefined. Cannot create file.");
        throw new Error("File system root not initialized. Cannot create file.");
      }

      const fileName = `copilot_${Date.now()}.${language}`;

      console.log("Copilot: Parent Directory ID:", parentDirId);
      console.log("Copilot: File Name to create:", fileName);

      // createFile will now also handle opening and setting the active file directly
      const newFileId = await createFile(parentDirId, fileName);
      console.log("Copilot: createFile returned ID:", newFileId);

      if (newFileId) {
        console.log("Copilot: Attempting to update file content for ID:", newFileId);
        await updateFileContent(newFileId, generatedCode);
        console.log("Copilot: File content updated successfully.");
        // No need for getFileById, openFile, setActiveFile here, as createFile handles it.
      } else {
        throw new Error("Failed to create file entry for generated code. newFileId was null or undefined.");
      }
      // --- CRITICAL FIX FOR FILE CREATION END ---

    } catch (err) {
      console.error("Copilot: Error generating code:", err);
      setOutput(`Error: ${err.message || "An unknown error occurred during code generation."}`);
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <CopilotContext.Provider
      value={{
        input,
        setInput,
        output,
        generateCode,
        isRunning,
      }}
    >
      {children}
    </CopilotContext.Provider>
  );
};

export const useCopilot = () => useContext(CopilotContext);
